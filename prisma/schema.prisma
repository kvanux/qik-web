// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expense {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  amount     Int
  date       DateTime  @db.Date
  user       User      @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID     String
  category   Category? @relation(fields: [categoryID], references: [id], onDelete: SetNull)
  categoryID Int?
}

model Income {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String?  @db.VarChar(50)
  amount    Int
  month     DateTime @db.Date
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String
}

model Billing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String?  @db.VarChar(50)
  amount    Int
  month     DateTime @db.Date
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String
}

model MonthlyBalance {
  id        Int      @id @default(autoincrement())
  year      Int
  month     Int
  balance   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String

  @@unique([year, month])
  @@index([year, month])
}

model Category {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(50)
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String

  Expense Expense[]

  @@unique([title, userID])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(500)
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String
  createdAt DateTime @default(now())
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  expenses      Expense[]
  income        Income[]
  billing       Billing[]
  balance       MonthlyBalance[]
  category      Category[]
  feedback      Feedback[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
